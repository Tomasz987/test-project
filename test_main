import ctypes
from threading import Thread
import time

from pynput.mouse import Listener, Button, Controller, Events

from tools.mouse_listener import RecordMouseEvents


class MouseController(Controller):
    """"Class to override mouse events methods."""
    def press(self, button):
        """"This overridden method not send press event to mouse."""
        self.SendInput(
            1,
            ctypes.byref(MouseController.INPUT(
                type=MouseController.INPUT.MOUSE,
                value=MouseController.INPUT_union(
                    mi=MouseController.MOUSEINPUT(
                        dwFlags=button.value[0],
                        mouseData=button.left.value[2])))),
            ctypes.sizeof(MouseController.INPUT))


def test_record_mouse_click():
    """Test check if mouse press event is saved"""
    record_object = RecordMouseEvents()

    excepted_result = [
        {'mouse_click':
            (
                {
                    'button': 'Button.left',
                    'pressed': False
                },
                {'time': 0.0}
            )
        }
    ]


    def simulate_event():
        Controller().press(Button.left)
        record_object.listener.stop()

    thread1 = Thread(target=record_object.record)
    thread2 = Thread(target=simulate_event)
    thread1.start()
    thread2.start()
    thread1.join()
    thread2.join()

    assert record_object.events == excepted_result
